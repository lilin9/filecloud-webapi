// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20240723050154_InitDatabase")]
    partial class InitDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entitys.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("数据库自增Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("唯一标识");

                    b.Property<string>("FileMimeType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("文件的mime类型");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("文件名");

                    b.Property<string>("FileOnlyTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("文件的唯一标识，表示给用户看的");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit")
                        .HasComment("当前文件是否被禁止被访问");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("bit")
                        .HasComment("是否为文件夹");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("父级Id");

                    b.Property<string>("StaticDownloadUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)")
                        .HasComment("文件的静态下载链接");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasComment("修改时间");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("用户信息Id");

                    b.HasKey("Id");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("Domain.Entitys.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("数据库自增Id，必须");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("bit")
                        .HasComment("当前账户是否可用，必须");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("用户头像，必须");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisableReason")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("账户禁用原因，可选");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("用户邮箱，必须");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UnLockTime")
                        .HasColumnType("datetime2")
                        .HasComment("账户解封时间，可选");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2")
                        .HasComment("更新时间，必须");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("用户唯一标识，必须");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasComment("用户名，必须");

                    b.HasKey("Id");

                    b.ToTable("UserInfos", (string)null);
                });

            modelBuilder.Entity("Domain.Entitys.Files", b =>
                {
                    b.OwnsOne("Domain.Entitys.SalveModel.MyFile", "FileSize", b1 =>
                        {
                            b1.Property<int>("FilesId")
                                .HasColumnType("int");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Value")
                                .HasColumnType("float");

                            b1.HasKey("FilesId");

                            b1.ToTable("Files");

                            b1.WithOwner()
                                .HasForeignKey("FilesId");
                        });

                    b.Navigation("FileSize")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entitys.UserInfo", b =>
                {
                    b.OwnsOne("Domain.Entitys.Disk", "UserDisk", b1 =>
                        {
                            b1.Property<int>("UserInfoId")
                                .HasColumnType("int");

                            b1.HasKey("UserInfoId");

                            b1.ToTable("UserInfos");

                            b1.WithOwner()
                                .HasForeignKey("UserInfoId");

                            b1.OwnsOne("Domain.Entitys.SalveModel.MyFile", "RemainingCapacity", b2 =>
                                {
                                    b2.Property<int>("DiskUserInfoId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Unit")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");

                                    b2.HasKey("DiskUserInfoId");

                                    b2.ToTable("UserInfos");

                                    b2.WithOwner()
                                        .HasForeignKey("DiskUserInfoId");
                                });

                            b1.OwnsOne("Domain.Entitys.SalveModel.MyFile", "TotalCapacity", b2 =>
                                {
                                    b2.Property<int>("DiskUserInfoId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Unit")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");

                                    b2.HasKey("DiskUserInfoId");

                                    b2.ToTable("UserInfos");

                                    b2.WithOwner()
                                        .HasForeignKey("DiskUserInfoId");
                                });

                            b1.OwnsOne("Domain.Entitys.SalveModel.MyFile", "UsedCapacity", b2 =>
                                {
                                    b2.Property<int>("DiskUserInfoId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Unit")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("Value")
                                        .HasColumnType("float");

                                    b2.HasKey("DiskUserInfoId");

                                    b2.ToTable("UserInfos");

                                    b2.WithOwner()
                                        .HasForeignKey("DiskUserInfoId");
                                });

                            b1.Navigation("RemainingCapacity")
                                .IsRequired();

                            b1.Navigation("TotalCapacity")
                                .IsRequired();

                            b1.Navigation("UsedCapacity")
                                .IsRequired();
                        });

                    b.OwnsOne("Domain.Entitys.SalveModel.MyTime", "BanTime", b1 =>
                        {
                            b1.Property<int>("UserInfoId")
                                .HasColumnType("int");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint");

                            b1.HasKey("UserInfoId");

                            b1.ToTable("UserInfos");

                            b1.WithOwner()
                                .HasForeignKey("UserInfoId");
                        });

                    b.Navigation("BanTime")
                        .IsRequired();

                    b.Navigation("UserDisk")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
